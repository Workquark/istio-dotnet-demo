apiVersion: apps/v1
kind: Deployment
metadata:
  name: croudpulse-profile-api
  labels:
    name: croudpulse-profile-api
    app: croudpulse
spec:
  selector:
    matchLabels:
      app: croudpulse
  minReadySeconds: 30
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: croudpulse-profile-api
        app: croudpulse
    spec:
      containers:
        - image: joydeep1985/profile
          name: profile-api
          resources:
            requests:
              cpu: "0.5m"
              memory: "200M"
            limits:
              cpu: "1"
              memory: "250M"
          imagePullPolicy: Always
      restartPolicy: Always
---
kind: Service
apiVersion: v1
metadata:
  name: profile-service
spec:
  selector:
    app: croudpulse
    name: croudpulse-profile-api
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: croudpulse-expense-api
  labels:
    name: croudpulse-expense-api
    app: croudpulse
spec:
  selector:
    matchLabels:
      app: croudpulse
  minReadySeconds: 30
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: croudpulse-expense-api
        app: croudpulse
    spec:
      containers:
        - image: joydeep1985/expense
          name: expense-api
          resources:
            requests:
              cpu: "0.5m"
              memory: "200M"
            limits:
              cpu: "1"
              memory: "250M"
          imagePullPolicy: Always
      restartPolicy: Always
---
kind: Service
apiVersion: v1
metadata:
  name: expense-service
spec:
  selector:
    app: croudpulse
    name: croudpulse-expense-api
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: profile-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - http:
        paths:
          - path: /profile/(.+)
            backend:
              serviceName: profile-service
              servicePort: 80
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: expense-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - http:
        paths:
          - path: /expense/(.+)
            backend:
              serviceName: expense-service
              servicePort: 80

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: my-name
  labels:
    name: my-name
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: my-name
    spec:
      containers:
        - image: ipedrazas/docmock
          name: my-name
          resources:
            requests:
              cpu: "20m"
              memory: "55M"
          livenessProbe:
            httpGet:
              path: /_status/healthz
              port: 5000
            initialDelaySeconds: 90
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /_status/healthz
              port: 5000
            initialDelaySeconds: 30
            timeoutSeconds: 10
          env:
            - name: ENVVARNAME
              value: ENVVARVALUE
          ports:
            - containerPort: 5000
              name: my-name
          volumeMounts:
            - mountPath: /data
              name: data
      volumes:
        - name: data
          emptyDir: {}
      restartPolicy: Always
      imagePullPolicy: Always
